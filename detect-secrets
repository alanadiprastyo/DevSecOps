
Download the source code

We will do all the exercises locally first in DevSecOps-Box, so lets start the exercise.

First, We need to download the source code of the project from our git repository.

git clone https://gitlab.practical-devsecops.training/pdso/django.nv webapp

Lets cd into the application so we can scan the app.

cd webapp

We are now in the webapp directory

Let’s move to the next step.



Install detect-secrets

    detect-secrets is a tool that designed with the enterprise client in mind: providing a backwards compatible to preventing new secrets from entering the code base and etc.

Source: detect-secrets repository

Let’s install the detect-secrets tool on the system to scan for the secrets in our code.

pip3 install detect-secrets

Collecting detect-secrets
  Downloading detect_secrets-0.14.3-py2.py3-none-any.whl (66 kB)
     |████████████████████████████████| 66 kB 3.0 MB/s 
Collecting pyyaml
  Downloading PyYAML-5.3.1.tar.gz (269 kB)
     |████████████████████████████████| 269 kB 17.3 MB/s 
Collecting requests
  Downloading requests-2.24.0-py2.py3-none-any.whl (61 kB)
     |████████████████████████████████| 61 kB 605 kB/s 
Collecting chardet<4,>=3.0.2
  Downloading chardet-3.0.4-py2.py3-none-any.whl (133 kB)
     |████████████████████████████████| 133 kB 55.5 MB/s 
Collecting urllib3!=1.25.0,!=1.25.1,<1.26,>=1.21.1
  Downloading urllib3-1.25.11-py2.py3-none-any.whl (127 kB)
     |████████████████████████████████| 127 kB 72.9 MB/s 
Collecting certifi>=2017.4.17
  Downloading certifi-2020.6.20-py2.py3-none-any.whl (156 kB)
     |████████████████████████████████| 156 kB 47.1 MB/s 
Collecting idna<3,>=2.5
  Downloading idna-2.10-py2.py3-none-any.whl (58 kB)
     |████████████████████████████████| 58 kB 13.0 MB/s 
Building wheels for collected packages: pyyaml
  Building wheel for pyyaml (setup.py) ... done
  Created wheel for pyyaml: filename=PyYAML-5.3.1-cp36-cp36m-linux_x86_64.whl size=44619 sha256=58f216294db715b3b73bc755fc4bd9618d849586a69afdfa8347687c5b9ec58b
  Stored in directory: /root/.cache/pip/wheels/e5/9d/ad/2ee53cf262cba1ffd8afe1487eef788ea3f260b7e6232a80fc
Successfully built pyyaml
Installing collected packages: pyyaml, chardet, urllib3, certifi, idna, requests, detect-secrets
Successfully installed certifi-2020.6.20 chardet-3.0.4 detect-secrets-0.14.3 idna-2.10 pyyaml-5.3.1 requests-2.24.0 urllib3-1.25.11

Let’s explore what options detect-secrets provides us

detect-secrets --help

usage: detect-secrets [-h] [-v] [--version] {scan,audit} ...

positional arguments:
  {scan,audit}

optional arguments:
  -h, --help     show this help message and exit
  -v, --verbose  Verbose mode.
  --version      Display version information.

Let’s move to the next step.



Run the Scanner

As we have learned in the DevSecOps Gospel we should save the output in the machine-readable format. JSON, CSV, XML formats can be parsed by the machines easily.

Let’s run scan arguments to find any secret in our code.

detect-secrets scan

{
  "custom_plugin_paths": [],
  "exclude": {
    "files": null,
    "lines": null
  },
  "generated_at": "2020-11-05T10:15:53Z",
  "plugins_used": [
    {
      "name": "AWSKeyDetector"
    },
    {
      "name": "ArtifactoryDetector"
    },
    {
      "base64_limit": 4.5,
      "name": "Base64HighEntropyString"
    },
    {
      "name": "BasicAuthDetector"
    },
    {
      "name": "CloudantDetector"
    },
    {
      "hex_limit": 3,
      "name": "HexHighEntropyString"
    },
    {
      "name": "IbmCloudIamDetector"
    },
    {
      "name": "IbmCosHmacDetector"
    },
    {
      "name": "JwtTokenDetector"
    },
    {
      "keyword_exclude": null,
      "name": "KeywordDetector"
    },
    {
      "name": "MailchimpDetector"
    },
    {
      "name": "PrivateKeyDetector"
    },
    {
      "name": "SlackDetector"
    },
    {
      "name": "SoftlayerDetector"
    },
    {
      "name": "StripeDetector"
    },
    {
      "name": "TwilioKeyDetector"
    }
  ],
  "results": {
    "fixtures/users.json": [
      {
        "hashed_secret": "67769bb527c3288a11758fa2c352a459184e0387",
        "is_verified": false,
        "line_number": 9,
        "type": "Secret Keyword"
      },
      {
        "hashed_secret": "dddf4e86c1ad748ea11da36e95855daf2d94cc82",
        "is_verified": false,
        "line_number": 23,
        "type": "Secret Keyword"
      },
      {
        "hashed_secret": "0bc240d52d1d053b4af505f6b3a72de130b944ba",
        "is_verified": false,
        "line_number": 37,
        "type": "Secret Keyword"
      },
      {
        "hashed_secret": "7d1061f95347b8e9672be204f5d2b4628a454aab",
        "is_verified": false,
        "line_number": 51,
        "type": "Secret Keyword"
      },
      {
        "hashed_secret": "487ee8358599cd09964066d5c746b7394649b97c",
        "is_verified": false,
        "line_number": 65,
        "type": "Secret Keyword"
      }
    ],
    "taskManager/templates/taskManager/register.html": [
      {
        "hashed_secret": "4275be7cb54a0f1cb835d5f5ea7bda93b1803887",
        "is_verified": false,
        "line_number": 34,
        "type": "Secret Keyword"
      }
    ]
  },
  "version": "0.14.3",
  "word_list": {
    "file": null,
    "hash": null
  }
}

It seems detect-secrets give us the output in the JSON format. Let’s store the output/results into the file.

detect-secrets scan > secrets-output.json

We can also mark the issues/findings as false-positives in the output file using audit command. You can accept the issue as a real issue using y for yes and n for no.

Go ahead and mark the issues appropriately.

detect-secrets audit secrets-output.json

Secret:      1 of 6
Filename:    fixtures/users.json
Secret Type: Secret Keyword
----------
4:    "pk": 1,
5:    "fields": {
6:      "first_name" : "",
7:      "last_name" : "",
8:      "username" : "admin",
9:      "password": "md5$oAKvI66ce0Xq$a5c1836db3d6dedff5deca630a358d8b",
10:      "is_superuser" : true,
11:      "email" : "admin@tm.com",
12:      "is_staff" : true,
13:      "is_active" : true
14:    }
----------
Is this a valid secret? i.e. not a false-positive __(y)es, (n)o, (s)kip, (q)uit__:

    Did you notice, its much more efficient than trufflehog?

Let’s move to the next step.



Exercise

    Explore the documentation of the detect-secrets tool - https://github.com/Yelp/detect-secrets.
    Reduce the false positives and put it on CI/CD pipeline.
    Remember to keep the DevSecOps Gospel best practices in mind while doing this exercise.

    Note: you can use any exercise with CI/CD in its title/heading e.g., Embed Bandit into CI/CD Pipeline to do this exercise.

