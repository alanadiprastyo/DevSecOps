
Download the source code

We will do all the exercises locally first in DevSecOps-Box, so lets start the exercise.

First, We need to download the source code of the project from our git repository.

git clone https://gitlab.practical-devsecops.training/pdso/django.nv webapp

Lets cd into the application so we can scan the app.

cd webapp

We are now in the webapp directory

Let’s move to the next step.




Install TruffleHog

    TruflleHog is a tool that searches through git repositories for secrets, digging deep into commit history and branches. This is effective at finding secrets accidentally committed.

    Source: TruflleHog Repoistory

Let’s install the TruffleHog tool on the system to scan for the secrets in our code.

pip3 install trufflehog

Collecting trufflehog
  Downloading https://files.pythonhosted.org/packages/c1/53/e91b67438bae15348d4a6afe03da4e86c4416317a919f7fa83991e3b8fda/truffleHog-2.1.11-py2.py3-none-any.whl
Collecting truffleHogRegexes==0.0.7 (from trufflehog)
  Downloading https://files.pythonhosted.org/packages/7d/e3/5f800360d7f0b68f935fcd06ec18ec28802b931aa4bf6caef20de00b6546/truffleHogRegexes-0.0.7-py2.py3-none-any.whl
Collecting GitPython==3.0.6 (from trufflehog)
  Downloading https://files.pythonhosted.org/packages/3e/aa/b0b6ee23f72a1255ba8aaffa38459d17e884f7056189bd733adee4f9a1e2/GitPython-3.0.6-py3-none-any.whl (451kB)
    100% |████████████████████████████████| 460kB 1.9MB/s 
Collecting gitdb2>=2.0.0 (from GitPython==3.0.6->trufflehog)
  Downloading https://files.pythonhosted.org/packages/52/7e/59f96b47f671b3fe0aa0c1b609531a540434b719a10c417581e25b383909/gitdb2-4.0.2-py3-none-any.whl
Collecting gitdb>=4.0.1 (from gitdb2>=2.0.0->GitPython==3.0.6->trufflehog)
  Downloading https://files.pythonhosted.org/packages/48/11/d1800bca0a3bae820b84b7d813ad1eff15a48a64caea9c823fc8c1b119e8/gitdb-4.0.5-py3-none-any.whl (63kB)
    100% |████████████████████████████████| 71kB 4.0MB/s 
Collecting smmap<4,>=3.0.1 (from gitdb>=4.0.1->gitdb2>=2.0.0->GitPython==3.0.6->trufflehog)
  Downloading https://files.pythonhosted.org/packages/b0/9a/4d409a6234eb940e6a78dfdfc66156e7522262f5f2fecca07dc55915952d/smmap-3.0.4-py2.py3-none-any.whl
Installing collected packages: truffleHogRegexes, smmap, gitdb, gitdb2, GitPython, trufflehog
Successfully installed GitPython-3.0.6 gitdb-4.0.5 gitdb2-4.0.2 smmap-3.0.4 truffleHogRegexes-0.0.7 trufflehog-2.1.11

Let’s explore what options Trufflehog provides us

trufflehog --help

usage: trufflehog [-h] [--json] [--regex] [--rules RULES]
                  [--entropy DO_ENTROPY] [--since_commit SINCE_COMMIT]
                  [--max_depth MAX_DEPTH] [--branch BRANCH]
                  [-i INCLUDE_PATHS_FILE] [-x EXCLUDE_PATHS_FILE]
                  [--repo_path REPO_PATH] [--cleanup]
                  git_url

Find secrets hidden in the depths of git.

positional arguments:
  git_url               URL for secret searching

optional arguments:
  -h, --help            show this help message and exit
  --json                Output in JSON
  --regex               Enable high signal regex checks
  --rules RULES         Ignore default regexes and source from json list file
  --entropy DO_ENTROPY  Enable entropy checks
  --since_commit SINCE_COMMIT
                        Only scan from a given commit hash
  --max_depth MAX_DEPTH
                        The max commit depth to go back when searching for
                        secrets
  --branch BRANCH       Name of the branch to be scanned
  -i INCLUDE_PATHS_FILE, --include_paths INCLUDE_PATHS_FILE
                        File with regular expressions (one per line), at least
                        one of which must match a Git object path in order for
                        it to be scanned; lines starting with "#" are treated
                        as comments and are ignored. If empty or not provided
                        (default), all Git object paths are included unless
                        otherwise excluded via the --exclude_paths option.
  -x EXCLUDE_PATHS_FILE, --exclude_paths EXCLUDE_PATHS_FILE
                        File with regular expressions (one per line), none of
                        which may match a Git object path in order for it to
                        be scanned; lines starting with "#" are treated as
                        comments and are ignored. If empty or not provided
                        (default), no Git object paths are excluded unless
                        effectively excluded via the --include_paths option.
  --repo_path REPO_PATH
                        Path to the cloned repo. If provided, git_url will not
                        be used
  --cleanup             Clean up all temporary result files

Let’s move to the next step.



Run the Scanner

As we have learned in the DevSecOps Gospel we should save the output in the machine-readable format. JSON, CSV, XML formats can be parsed by the machines easily.

We are using tee here to show the output and store it a file simultaneously

trufflehog . --json | tee secret.json

    file flag used to specify the input file
    --json flag tells that output should be in the JSON format

.......................SNIP..........................................................
low...\"\n-#     username = password = ''\n-#     if request.POST:\n-#         username = request.POST.get('username')\n-#         password = request.POST.get('password')\n-\n-#         user = authenticate(username=username, password=password)\n-#         if user is not None:\n-#             if user.is_active:\n-#                 login(request, user)\n-#                 state = \"You're successfully logged in!\"\n-#             else:\n-#                 state = \"Your account is not active, please contact the site admin.\"\n-#         else:\n-#             state = \"Your username and/or password were incorrect.\"\n+def login(request):\n+    state = \"Please log in below...\"\n+    username = password = ''\n+    if request.POST:\n+        username = request.POST.get('username')\n+        password = request.POST.get('password')\n+\n+        user = authenticate(username=username, password=password)\n+        if user is not None:\n+            if user.is_active:\n+                login(request, user)\n+                state = \"You're successfully logged in!\"\n+            else:\n+                state = \"Your account is not active, please contact the site admin.\"\n+        else:\n+            state = \"Your username and/or password were incorrect.\"\n \n-#     return render_to_response('login.html',{'state':state, 'username': username})\n+    return render_to_response('login.html',{'state':state, 'username': username})\n \n \n def proj_details(request, project_id):\n@@ -114,7 +86,15 @@ def the_comments(request, task_id):\n \tresponse = \"You're looking at the comments of question %s.\"\n \treturn HttpResponse(response % task_id)\n \n-def detail(request, task_id, project_id):\n+def detail(request, task_id, foreign_key):\n+\t#try:\n+\tif request.method == 'POST':\n+\t\tform = CommentForm(request.POST)\n+\t\tif form.is_valid():\n+\t\t\treturn HttpResponseRedirect('/thanks/')\n+\t\telse:\n+\t\t\tform = CommentForm()\n+\n \ttask = Task.objects.get(pk = task_id)\n \t#except Task.DoesNotExist:\n \t#\traise Http404\n", "reason": "High Entropy", "stringsFound": ["20821e4abaea95268880f020c9f6768288f3725a"]}

Okay, so we got some results from the tool but are these false positives or real issues.

What can we do to improve the situation?

