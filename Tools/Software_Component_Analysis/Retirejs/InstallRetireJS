
Download the source code

We will do all the exercises locally first in DevSecOps-Box, so lets start the exercise.

First, We need to download the source code of the project from our git repository.

git clone https://gitlab.practical-devsecops.training/pdso/django.nv webapp

Lets cd into the application code so we can scan the app.

cd webapp

We are now in the webapp directory



Install RetireJS Tool

    There are lots of JavaScript libraries for use on the Web and in Node.JS apps. This greatly simplifies development, but we need to stay up-to-date on security fixes. “Using Components with Known Vulnerabilities” is now a part of the OWASP Top 10 list

    RetireJS helps you in finding the insecure Javascript libraries in your code.

Source: Retirejs Github Page

First we need to install Node JS and NPM.

curl -sL https://deb.nodesource.com/setup_10.x | bash -

apt install nodejs -y

Then we can install the retirejs tool on the system to find insecure Javascript library.

npm install -g retire

/usr/local/bin/retire -> /usr/local/lib/node_modules/retire/bin/retire
+ retire@2.2.1
added 40 packages from 30 contributors in 8.799s

Let’s explore what options retirejs gives us.

retire --help

  Usage: retire [options]

  Options:

    -h, --help               output usage information
    -V, --version            output the version number

    -p, --package            limit node scan to packages where parent is mentioned in package.json (ignore node_modules)
    -n, --node               Run node dependency scan only
    -j, --js                 Run scan of JavaScript files only
    -v, --verbose            Show identified files (by default only vulnerable files are shown)
    -x, --dropexternal       Don't include project provided vulnerability repository
    -c, --nocache            Don't use local cache

    --jspath <path>          Folder to scan for javascript files
    --nodepath <path>        Folder to scan for node files
    --path <path>            Folder to scan for both
    --jsrepo <path|url>      Local or internal version of repo
    --noderepo <path|url>    Local or internal version of repo
    --cachedir <path>        Path to use for local cache instead of /tmp/.retire-cache
    --proxy <url>            Proxy url (http://some.sever:8080)
    --outputformat <format>  Valid formats: text, json, jsonsimple, depcheck (experimental) and cyclonedx
    --outputpath <path>      File to which output should be written
    --ignore <paths>         Comma delimited list of paths to ignore
    --ignorefile <path>      Custom ignore file, defaults to .retireignore / .retireignore.json
    --severity <level>       Specify the bug severity level from which the process fails. Allowed levels none, low, medium, high, critical. Default: none
    --exitwith <code>        Custom exit code (default: 13) when vulnerabilities are found
    --colors                 Enable color output (console output only)
    --insecure               Enable fetching remote jsrepo/noderepo files from hosts using an insecure or self-signed SSL (TLS) certificate
    --cacert <path>          Use the specified certificate file to verify the peer used for fetching remote jsrepo/noderepo files

Let’s move to the next step.




Run the Scanner

Front end dependencies that are managed via npm are stored in package.json file. Lets checkout the package.json file.

cat package.json

Before running the scan, we need to install the npm packages available in the package.json file.

npm install

npm WARN deprecated bcrypt-nodejs@0.0.3: bcrypt-nodejs is no longer actively maintained. Please use bcrypt or bcryptjs. See https://github.com/kelektiv/node.bcrypt.js/wiki/bcrypt-vs-brypt.js to learn more about these two options
npm WARN deprecated swig@1.4.2: This package is no longer maintained
npm WARN deprecated request@2.36.0: request has been deprecated, see https://github.com/request/request/issues/3142

 ...[SNIP]...

npm WARN deprecated cryptiles@2.0.5: This version has been deprecated in accordance with the hapi support policy (hapi.im/support). Please upgrade to the latest version to get the best features, bug fixes, and security patches. If you are unable to upgrade at this time, paid support is available for older versions (hapi.im/commercial).
npm WARN deprecated boom@2.10.1: This version has been deprecated in accordance with the hapi support policy (hapi.im/support). Please upgrade to the latest version to get the best features, bug fixes, and security patches. If you are unable to upgrade at this time, paid support is available for older versions (hapi.im/commercial).
npm WARN deprecated sntp@1.0.9: This module moved to @hapi/sntp. Please make sure to switch over as this distribution is no longer supported and may contain bugs and critical security issues.
npm WARN deprecated resolve-url@0.2.1: https://github.com/lydell/resolve-url#deprecated
npm WARN deprecated urix@0.1.0: Please see https://github.com/lydell/urix#deprecated
npm WARN deprecated nodeunit@0.9.5: you are strongly encouraged to use other testing options
npm WARN deprecated request@2.79.0: request has been deprecated, see https://github.com/request/request/issues/3142

> nodemon@1.19.4 postinstall /django.nv/node_modules/nodemon
> node bin/postinstall || exit 0

Love nodemon? You can now support the project via the open collective:
 > https://opencollective.com/nodemon/donate

npm notice created a lockfile as package-lock.json. You should commit this file.
npm WARN optional SKIPPING OPTIONAL DEPENDENCY: fsevents@^1.0.0 (node_modules/chokidar/node_modules/fsevents):
npm WARN notsup SKIPPING OPTIONAL DEPENDENCY: Unsupported platform for fsevents@1.2.13: wanted {"os":"darwin","arch":"any"} (current: {"os":"linux","arch":"x64"})

added 1332 packages from 1242 contributors and audited 1333 packages in 218.647s

31 packages are looking for funding
  run __npm fund__ for details

found 198 vulnerabilities (61 low, 72 moderate, 63 high, 2 critical)
  run __npm audit fix__ to fix them, or __npm audit__ for details

As we have learned in the DevSecOps Gospel, we should save the output in a machine-readable format so the output can be parsed by the machines.

retire --outputformat json --outputpath retire_output.json

    –outputpath flag used to specify output file in which the output has to be saved
    –outputformat flag tells that output should be in the JSON format

Now use the cat command to see the retirejs output.

cat retire_output.json

{"version":"2.2.1","start":"2020-05-25T03:55:19.929Z","data":[{"file":"/django.nv/node_modules/grunt-retire/test-files/dojo.js","results":[{"version":"1.4.2","component":"dojo","detection":"filecontentreplace","vulnerabilities":[{"info":["https://github.com/dojo/dojo/pull/307","https://dojotoolkit.org/blog/dojo-1-14-released"],"below":"1.10.10","severity":"medium","identifiers":{"PR":"307"}},{"info":["https://dojotoolkit.org/blog/dojo-1-14-released"],"below":"1.14","severity":"medium","identifiers":{"CVE":["CVE-2018-15494"]}}]}]},{"file":"/django.nv/node_modules/grunt-retire/test-files/jquery-1.6.js",
...[SNIP]...,
"results":[{"component":"tough-cookie","version":"2.2.2","vulnerabilities":[{"info":["https://nodesecurity.io/advisories/130"],"below":"2.3.0","atOrAbove":"0.9.7","severity":"high","identifiers":{"advisory":"ReDoS via long string of semicolons"}}]}]},{"file":"node_modules/zaproxy/node_modules/lodash/package.json","results":[{"component":"lodash","version":"2.4.2","vulnerabilities":[{"info":["https://hackerone.com/reports/310443"],"below":"4.0.0","severity":"low","identifiers":{"summary":"Prototype pollution attack"}},{"info":["https://hackerone.com/reports/380873"],"below":"4.17.11","severity":"low","identifiers":{"summary":"Prototype pollution attack"}}]}]},{"file":"node_modules/zaproxy/node_modules/request/package.json","results":[{"component":"request","version":"2.36.0","vulnerabilities":[{"info":["https://nodesecurity.io/advisories/309"],"below":"2.47.0","atOrAbove":"2.2.6","severity":"medium","identifiers":{"summary":"request_remote-memory-exposure"}}]}]},{"file":"node_modules/zaproxy/node_modules/hawk/package.json","results":[{"component":"hawk","version":"1.0.0","vulnerabilities":[{"info":["https://nodesecurity.io/advisories/77"],"below":"3.1.3","severity":"medium","identifiers":{"summary":"Regex denial of service"}}]}]},{"file":"node_modules/zaproxy/node_modules/hoek/package.json","results":[{"component":"hoek","version":"0.9.1","vulnerabilities":[{"info":["https://hackerone.com/reports/310439"],"below":"4.2.1","severity":"low","identifiers":{"summary":"Prototype pollution attack"}}]}]},{"file":"node_modules/zaproxy/node_modules/qs/package.json","results":[{"component":"qs","version":"0.6.6","vulnerabilities":[{"info":["https://nodesecurity.io/advisories/28"],"below":"1.0.0","severity":"medium","identifiers":{"advisory":"qs_dos_extended_event_loop_blocking"}},{"info":["https://nodesecurity.io/advisories/29"],"below":"1.0.0","severity":"high","identifiers":{"summary":"qs_denial-of-service-memory-exhaustion"}}]}]},{"file":"node_modules/forever-monitor/node_modules/utile/package.json","results":[{"component":"utile","version":"0.3.0","vulnerabilities":[{"info":["https://hackerone.com/reports/321701"],"below":"99.999.9999","severity":"low","identifiers":{"summary":"Out-of-bounds Read"}}]}]}],"messages":[],"errors":[],"time":28.34}

Let’s move to the next step.
