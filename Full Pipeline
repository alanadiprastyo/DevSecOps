image: docker:latest

services:
  - docker:dind

stages:
  - build
  - test
  - SAST
  - DAST
  - prod

build:
  stage: build
  image: python:3.6
  before_script:
   - pip3 install --upgrade virtualenv
  script:
   - virtualenv env
   - source env/bin/activate
   - pip install -r requirements.txt
   - python manage.py check

test:
  stage: test
  image: python:3.6
  before_script:
   - pip3 install --upgrade virtualenv
  script:
   - virtualenv env
   - source env/bin/activate
   - pip install -r requirements.txt
   - python manage.py test taskManager

SCA:
  stage: test
  script:
    #pull docker image safety
    - docker pull hysnsec/safety
    # execute to run safety images in docker and check the component
    - docker run -v $(pwd):/src --rm hysnsec/safety check -r requirements.txt --json > sca-results.json
  artifacts:
    paths: [sca-results.json]
    when: always
    expire_in: one week
  allow_failure: true

Secret-Scanning:
  stage: test
  image: python:3.6
  before_script:
   - pip3 install detect-secrets
  script:
   - detect-secrets scan > secrets-output.json
  artifacts:
    paths: [secrets-output.json]
    when: always
  allow_failure: true


SAST:
  stage: SAST
  script:
    - docker pull hysnsec/bandit
    - docker run --user $(id -u):$(id -g) -v $(pwd):/src --rm hysnsec/bandit -r /src -f json -o /src/bandit-output.json
  artifacts:
    paths: [bandit-output.json]
    when: always
  allow_failure: true


Nikto:
  stage: DAST
  script:
    - docker pull alpine/nikto 
    - docker run --rm -v $(pwd):/tmp alpine/nikto -h prod-mzfpmjwn.lab.practical-devsecops.training -o /tmp/nikto.json
  artifacts:
    paths: [nikto.json]
    when: always
  allow_failure: true 


Nmap:
  stage: DAST
  script:
    - docker pull uzyexe/nmap 
    - docker run --rm -v $(pwd):/tmp uzyexe/nmap prod-mzfpmjwn.lab.practical-devsecops.training -oX /tmp/nmap_out.xml
  artifacts:
    paths: [nmap_out.xml]
    when: always
  allow_failure: true 
